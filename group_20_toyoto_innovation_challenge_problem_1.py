# -*- coding: utf-8 -*-
"""Group 20 Toyoto Innovation Challenge - Problem 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rReX4VN8toB5aDI4fCh_M0XycfG9Atot
"""

##from google.colab import drive
##drive.mount('/content/gdrive')

# Commented out IPython magic to ensure Python compatibility.
# import dependencies
import os
import sys

import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

import cv2

import ipywidgets as widgets
from ipywidgets import interact, interact_manual

from IPython.display import display, Javascript, Image

from google.colab.output import eval_js
from base64 import b64decode, b64encode
import PIL
import io
import html
import time

#Get Python and OpenCV Version

print('OpenCV-Python Lib Version:', cv2.__version__)
print('Python Version:',sys.version)
'''
# Download the test image
!wget --no-check-certificate \
    https://raw.githubusercontent.com/computationalcore/introduction-to-opencv/master/assets/noidea.jpg \
    -O noidea.jpg

# Download other Sample Images
!wget --no-check-certificate \
    https://raw.githubusercontent.com/MeAmarP/sample_imgs/master/wiki_shapes.jpg \
    -O wiki_shapes.jpg

!wget --no-check-certificate \
    https://raw.githubusercontent.com/MeAmarP/sample_imgs/master/indian_coins.jpg \
    -O indian_coins.jpg
'''
#Challenge 1 - Place a box around the car

def detectAllColor(img_to_read,find_color=None):
  img = img_to_read
  
  cropped_img = img[170:320]
  color_img = cv2.cvtColor(cropped_img,cv2.COLOR_BGR2HSV)

  if find_color == "white":
      whiteUpper = np.array([0,0,220])
      whiteLower = np.array([180,30,255])

      img_mask_white = cv2.inRange(color_img,whiteUpper,whiteLower)
      return cropped_img, img_mask_white
  
  if find_color == "blue":
      blueUpper = np.array([112,50,50])
      blueLower = np.array([129,255,255])

      img_mask_blue = cv2.inRange(color_img,blueUpper,blueLower)
      return cropped_img, img_mask_blue

  if find_color == "black":
      blackUpper = np.array([0,0,0])
      blackLower = np.array([180,255,30])

      img_mask_black = cv2.inRange(color_img,blackUpper,blackLower)
      return cropped_img, img_mask_black

def showColors(og_img,masked_img):
    (contours,_)=cv2.findContours(masked_img,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
    FinImg = og_img.copy()
    for pic, contour in enumerate(contours):
        area = cv2.contourArea(contour)
        if(area):
            x,y,w,h = cv2.boundingRect(contour)
            cv2.putText(FinImg,"*",(int(x+w/2),int(y+h/2)),cv2.FONT_HERSHEY_SIMPLEX,0.7,(255,0,0))

    return

def checkWhite(crop_img, white_img):
  #Recolor it
  new_img_white = cv2.cvtColor(white_img,cv2.COLOR_BGR2RGB)

  #Make image grayscale
  img_gray_white = cv2.cvtColor(new_img_white, cv2.COLOR_BGR2GRAY) 

  #Contours
  ret, thresh = cv2.threshold(img_gray_white, 150, 255, cv2.THRESH_BINARY)
  contoursWhite, hierarchy = cv2.findContours(image=thresh, mode=cv2.RETR_TREE, method=cv2.CHAIN_APPROX_NONE)

  image_copy_white=crop_img.copy()
  cv2.drawContours(image=image_copy_white, contours=contoursWhite, contourIdx=-1, color=(0, 255, 0), thickness=2, lineType=cv2.LINE_AA)

  #Finds the biggest contour(where the car is in the image)
  cMaxSizeWhite = 0
  cMaxWhite = np.empty([1,1,2])
  for c in contoursWhite:
    if c.size >= cMaxSizeWhite:
      cMaxSizeWhite = c.size
      cMaxWhite = c

  return cMaxWhite

def checkBlue(crop_img,blue_img):
  new_img_blue = cv2.cvtColor(blue_img,cv2.COLOR_BGR2RGB)

  img_gray_blue = cv2.cvtColor(new_img_blue,cv2.COLOR_BGR2GRAY)

  ret, thresh = cv2.threshold(img_gray_blue, 150, 255, cv2.THRESH_BINARY)
  contoursBlue, hierarchy = cv2.findContours(image=thresh, mode=cv2.RETR_TREE, method=cv2.CHAIN_APPROX_NONE)

  image_copy_blue=crop_img.copy()
  cv2.drawContours(image=image_copy_blue, contours=contoursBlue, contourIdx=-1, color=(0, 255, 0), thickness=2, lineType=cv2.LINE_AA)

  cMaxSizeBlue = 0
  cMaxBlue = np.empty([1,1,2])
  for c in contoursBlue:
    if c.size >= cMaxSizeBlue:
      cMaxSizeBlue = c.size
      cMaxBlue = c

  return cMaxBlue


def checkBlack(crop_img,black_img):
  new_img_black = cv2.cvtColor(black_img,cv2.COLOR_BGR2RGB)

  img_gray_black = cv2.cvtColor(new_img_black, cv2.COLOR_BGR2GRAY) 

  ret, thresh = cv2.threshold(img_gray_black, 150, 255, cv2.THRESH_BINARY)
  contoursBlack, hierarchy = cv2.findContours(image=thresh, mode=cv2.RETR_TREE, method=cv2.CHAIN_APPROX_NONE)

  image_copy_black=crop_img.copy()
  cv2.drawContours(image=image_copy_black, contours=contoursBlack, contourIdx=-1, color=(0, 255, 0), thickness=2, lineType=cv2.LINE_AA)

  cMaxSizeBlack = 0
  cMaxBlack = np.empty([1,1,2])
  for c in contoursBlack:
    if c.size >= cMaxSizeBlack:
      cMaxSizeBlack = c.size
      cMaxBlack = c 

  return cMaxBlack


def compareContours(white,blue,black):
  #Find in which image the biggest (most prominent) contour is 
  if len(white) > len(blue) and len(white) > (len(black)-200):
    new_img = white_mask
    cMax = white

  elif len(blue) > len(white) and len(blue) > (len(black)-200):
    new_img = white_mask
    cMax = blue
    
  elif len(black) > len(white) and len(black) > (len(blue)-200):
    new_img = black_mask
    cMax = black

  return new_img,cMax


def drawDaBox(mask_img,cMax,og_img):
  #Draw the box using the mask that had the most prominent contour
  mask_img = cv2.cvtColor(mask_img,cv2.COLOR_BGR2RGB)
  img_gray = cv2.cvtColor(mask_img, cv2.COLOR_BGR2GRAY)

  ret, thresh = cv2.threshold(img_gray, 150, 255, cv2.THRESH_BINARY)

  contours, hierarchy = cv2.findContours(image=thresh, mode=cv2.RETR_TREE, method=cv2.CHAIN_APPROX_NONE)

  x,y,w,h = cv2.boundingRect(cMax)
  box = cv2.boxPoints(((x+51,y+15),(w+20,h+40),None))
  box = np.int0(box)

  #Draw contours
  cv2.drawContours(og_img,[box],0,(255,0,0),2,None,None,None,(0,170))

  plt.imshow(cv2.cvtColor(og_img,cv2.COLOR_BGR2RGB))


#Global variables
original_image = cv2.imread('black_lexus_2.jpeg')

white_crop,white_mask = detectAllColor(original_image,find_color='white')

blue_crop,blue_mask = detectAllColor(original_image,find_color='blue')

black_crop,black_mask = detectAllColor(original_image,find_color='black')

#Main
white_max = checkWhite(white_crop,white_mask)

blue_max = checkBlue(blue_crop,blue_mask)

black_max = checkBlack(black_crop,black_mask)

final_mask,cMax = compareContours(white_max,blue_max,black_max)

drawDaBox(final_mask,cMax,original_image)
